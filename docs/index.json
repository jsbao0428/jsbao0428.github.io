[{"categories":["MongoDB"],"content":"MongoDB Manipulation via Python Package ","date":"2021-11-20","objectID":"/mongodb-pymongo/:0:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Abstract In this article, we’re going to demostrate how to use pymongo to control mongodb. We will implement a simple web crawler to scrap items data from Shopee (a E-commerce Platform), and use it as today’s sample data to store it into our mongodb. ","date":"2021-11-20","objectID":"/mongodb-pymongo/:1:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Goals We Will Complete in this Article Develop a simple web crawler Understand basic knowledge of pymongo Learn basic manipulation of MongoDB Acquire basic knowledge of pytz ","date":"2021-11-20","objectID":"/mongodb-pymongo/:2:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Install Pymongo via pip pip install pymongo ","date":"2021-11-20","objectID":"/mongodb-pymongo/:3:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Create Client Object We import MongoClient Object from pymongo, and Initialize it with the Host (where Mongo is running), Username and Password. Notice: 27017 is the default port for Mongo service. We can change it in the config file. import os from pymongo import MongoClient MONGO_HOST = os.getenv('MONGO_HOST') # localhost or other host MONGO_USER = os.getenv('MONGO_USER') MONGO_PWD = os.getenv('MONGO_PWD') client = MongoClient(f'mongodb://{MONGO_USER}:{MONGO_PWD}@{MONGO_HOST}:27017') ","date":"2021-11-20","objectID":"/mongodb-pymongo/:4:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Verify Connection of MongoClient try: client.server_info() print('Well Connected') except: # error handler print('Connection Error') ","date":"2021-11-20","objectID":"/mongodb-pymongo/:5:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Develop A Simple Web Crawler ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Find Web API ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:1","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Send Request to Web API # set search keyword search_keyword = 'iphone' api_route = f'https://shopee.tw/api/v4/search/search_items?by=relevancy\u0026keyword={search_keyword}\u0026limit=60\u0026newest=0\u0026order=desc\u0026page_type=search\u0026scenario=PAGE_GLOBAL_SEARCH\u0026version=2' import requests res = requests.get(api_route) # check if api reponse correctly res.status_code # Read the response as JSON format search_result_json = res.json() ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:2","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Parsing JSON Structure By looking into search_result_json, we can find a hierarchical structure like below. { 'items': [ 'item_basic': { 'name': '冬季促銷大熱賣 原廠全新Apple iPhone 13 128GB(午夜/星光/粉/紅/藍)', 'image': 'b7c27cc99aba7955cf1890c50638c2f8', ... }, 'adsid': 35299839, ... ], ... } Now we know that item-related data is in each item_basic, we can extract them using python for loop. items_data = search_result_json.get('items') items_basic_data = [ item.get('item_basic') for item in items_data ] ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:3","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Data Preprocessing Let’s do some data-cleaning or preprocessing and make it more human-readable. import pandas as pd #convert json data to pandas dataframe items_basic_df = pd.DataFrame(items_basic_data)[['itemid', 'shopid', 'name', 'image']] # add image url prefix for image hash code image_url_prefix = 'https://cf.shopee.tw/file/' items_basic_df['image_url'] = items_basic_df['image'].apply( lambda x: image_url_prefix + x ) items_basic_df.head() # preview, show below itemid shopid name image image_url 158215044 16740752 透明滿版保護貼 玻璃貼 … b73326d54f4d0ab50cd994397197a3d7 https://cf.shopee.tw/file/b73326d54f4d0ab50cd9... 11052111436 272961258 限時3天秒殺 PD 閃充線 … d6663c9cde823bc32dabade7de1e4c0c https://cf.shopee.tw/file/d6663c9cde823bc32dab... 15714606 1982863 Q哥 抗藍光玻璃貼 … 547f1dabfb9ee61e1e88f87cf29ebbdc https://cf.shopee.tw/file/547f1dabfb9ee61e1e88... 3326952 196610 水晶盾 真5D曲面滿版保護貼 … 4aeebf5cd804f1278f49573984cfd48c https://cf.shopee.tw/file/4aeebf5cd804f1278f49... 10407177063 444998999 【鴻威通訊】 iPhone8 /iPhone8 … 529051371e5d17bafae2125160a137ce https://cf.shopee.tw/file/529051371e5d17bafae2... ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:4","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Time Processing Before we insert these data, let’s add a timestamp to every row. It can help us delete over-old data in the future. Notice Because MongoDB assumes that dates and times are in UTC, care should be taken to ensure that dates and times written to the database reflect UTC from datetime import datetime # item_basic_df['update_date'] = datetime.utcnow() # in general situation items_basic_df['update_date'] = datetime(2021, 1, 1) # for test ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:5","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"From DataFrame to Document MongoDB uses json-like data type called Document to store data. We can use pandas built-in function to convert it. items_basic_document = items_basic_df.to_dict('records') Let’s print it to preview from pprint import pprint # outline of single document print('single document (dict)') pprint(items_basic_document[0]) print('-'*80) # outline of multi-document print('multiple document (list of dict)') pprint(items_basic_document[:2]) output single document (dict) {'image': 'b73326d54f4d0ab50cd994397197a3d7', 'image_url': 'https://cf.shopee.tw/file/b73326d54f4d0ab50cd994397197a3d7', 'itemid': 158215044, 'name': '透明滿版保護貼 玻璃貼 背貼適用iPhone 13 12 11 Pro Max SE2 XR XS X i11 i12', 'shopid': 16740752, 'update_date': Timestamp('2021-01-01 00:00:00')} -------------------------------------------------------------------------------- multiple document (list of dict) [{'image': 'b73326d54f4d0ab50cd994397197a3d7', 'image_url': 'https://cf.shopee.tw/file/b73326d54f4d0ab50cd994397197a3d7', 'itemid': 158215044, 'name': '透明滿版保護貼 玻璃貼 背貼適用iPhone 13 12 11 Pro Max SE2 XR XS X i11 i12', 'shopid': 16740752, 'update_date': Timestamp('2021-01-01 00:00:00')}, {'image': 'd6663c9cde823bc32dabade7de1e4c0c', 'image_url': 'https://cf.shopee.tw/file/d6663c9cde823bc32dabade7de1e4c0c', 'itemid': 11052111436, 'name': '限時3天秒殺 PD 閃充線 充電線 傳輸線 適用於iPhone 11 12 13 pro max 超級快充線', 'shopid': 272961258, 'update_date': Timestamp('2021-01-01 00:00:00')}] Let’s put prepared data aside. There are some things we must know first. ","date":"2021-11-20","objectID":"/mongodb-pymongo/:6:6","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Database \u0026 Collection (Table) Manipulation Here we are going to create an object to manipulate our database, like getting all the collections (tables) of the database. ","date":"2021-11-20","objectID":"/mongodb-pymongo/:7:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Create a Database: crawler_test crawler_test = client['crawler_test'] ","date":"2021-11-20","objectID":"/mongodb-pymongo/:7:1","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Create a Collection (Table): items # both work items = crawler_test['items'] items = client['crawler_test']['items'] ","date":"2021-11-20","objectID":"/mongodb-pymongo/:7:2","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Get All Collections (Tables) We need to insert at least one document so that the database crawler_test \u0026 the table items will be created. Notice: An important note about collections (and databases) in MongoDB is that they are created lazily - none of the above commands have actually performed any operations on the MongoDB server. Collections and databases are created when the first document is inserted into them. # Truncate table items.delete_many({}) # insert one data into table: items items.insert_one({'key_test': 'value_test'}) # list all tables table_list = crawler_test.list_collection_names() print(table_list) output ['items'] ","date":"2021-11-20","objectID":"/mongodb-pymongo/:7:3","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Insert Here, we are going to insert prepared-data into our table if we don’t specify _id of the document, a bson.objectid.ObjectId will be auto-generated like {'_id': bson.objectid.ObjectId }. The rules of _id generation can be refered to the link. ","date":"2021-11-20","objectID":"/mongodb-pymongo/:8:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Insert One Document Insert one document at once from pprint import pprint import copy items = client['crawler_test']['items'] # specify collection items.delete_many({}) # Truncate table one_document = copy.deepcopy(items_basic_document[0]) print('Before Insert:') pprint(one_document) print('-'*80) response_insert_one = items.insert_one(one_document) print('After Insert:') pprint(one_document) Output Before Insert: {'image': 'b73326d54f4d0ab50cd994397197a3d7', 'image_url': 'https://cf.shopee.tw/file/b73326d54f4d0ab50cd994397197a3d7', 'itemid': 158215044, 'name': '透明滿版保護貼 玻璃貼 背貼適用iPhone 13 12 11 Pro Max SE2 XR XS X i11 i12', 'shopid': 16740752, 'update_date': Timestamp('2021-11-20 09:48:52.155124+0000', tz='UTC')} -------------------------------------------------------------------------------- After Insert: {'_id': ObjectId('6198c488a8bbf780143bec4d'), 'image': 'b73326d54f4d0ab50cd994397197a3d7', 'image_url': 'https://cf.shopee.tw/file/b73326d54f4d0ab50cd994397197a3d7', 'itemid': 158215044, 'name': '透明滿版保護貼 玻璃貼 背貼適用iPhone 13 12 11 Pro Max SE2 XR XS X i11 i12', 'shopid': 16740752, 'update_date': Timestamp('2021-11-20 09:48:52.155124+0000', tz='UTC')} ","date":"2021-11-20","objectID":"/mongodb-pymongo/:8:1","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Insert Many Documents Insert multiple document at once import copy items = client['crawler_test']['items'] # specify collection items.delete_many({}) # Truncate table many_document = copy.deepcopy(items_basic_document) response_insert_many = items.insert_many(many_document) Check ObjectId we just inserted response_insert_many.inserted_ids[:2] Output [ObjectId('6187ad0ea896a79a2cdae209'), ObjectId('6187ad0ea896a79a2cdae20a')] ","date":"2021-11-20","objectID":"/mongodb-pymongo/:8:2","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Select Documents Here we are going to select documents we just inserted into the collection ","date":"2021-11-20","objectID":"/mongodb-pymongo/:9:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Select All Documents Select all documents items = client['crawler_test']['items'] # specify collection # equal to SELECT * FROM crawler_test.items response_select_all = items.find({}) # use list iterate response_select_all and store as response_select_all_result, response_select_all_result = list(response_select_all) ","date":"2021-11-20","objectID":"/mongodb-pymongo/:9:1","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Count Documents Count the number of documents in the collection items.estimated_document_count() ","date":"2021-11-20","objectID":"/mongodb-pymongo/:9:2","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Select Documents With Condition use date as example Set the timezone # import pytz from datetime import datetime tw_tz = pytz.timezone('Asia/Taipei') Select by UTC timezone # select documents which its update_date less than or equal to 2021, 1, 1 00:00 UTC response_select_all = items.find( { 'update_date': { # '$gte': datetime(2021, 1, 1, 0, 0) # $gte greater than or equal to # '$eq': datetime(2021, 1, 1, 0, 0) # equal to '$lte': datetime(2021, 1, 1, 0, 0) # less than or equal to } } ) Select by different timezone # select documents which its update_date less than or equal to 2021, 1, 1 00:00 UTC response_select_all = items.find( { 'update_date': { # '$eq': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) # '$gte': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) '$lte': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) } } ) If we hope the results of select contain timezone Set the timezone we want in format of return from bson.codec_options import CodecOptions aware_times = items.with_options(codec_options=CodecOptions( tz_aware=True, tzinfo=pytz.timezone('Asia/Taipei')) ) Select by UTC timezone # select documents which its update_date less than or equal to 2021, 1, 1 00:00 UTC response_select_all = aware_times.find( { 'update_date': { # '$gte': datetime(2021, 1, 1, 0, 0) # '$eq': datetime(2021, 1, 1, 0, 0) '$lte': datetime(2021, 1, 1, 0, 0) } } ) Select by different timezone response_select_all = aware_times.find( { 'update_date': { # '$eq': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) # '$gte': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) '$lte': tw_tz.localize(datetime(2021, 1, 1, 8, 0)) } } ) Show result response_select_all_result = list(response_select_all) response_select_all_result ","date":"2021-11-20","objectID":"/mongodb-pymongo/:9:3","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Delete Documents Delete documents from the collection ","date":"2021-11-20","objectID":"/mongodb-pymongo/:10:0","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Delete All Documents items.delete_many({}) ","date":"2021-11-20","objectID":"/mongodb-pymongo/:10:1","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":["MongoDB"],"content":"Delete Documents With Condition Delete documents with condition # delete documents which its update_date less than or equal to 2021, 1, 1 00:00 UTC items.delete_many( { 'update_date': { # '$gte': datetime(2021, 1, 1, 0, 0) # '$eq': datetime(2021, 1, 1, 0, 0) '$lte': datetime(2021, 1, 1, 0, 0) } } ) ","date":"2021-11-20","objectID":"/mongodb-pymongo/:10:2","tags":["python","mongodb"],"title":"mongoDB + Python","uri":"/mongodb-pymongo/"},{"categories":[],"content":"About Me As a software engineer with 2 years of experience in the E-commerce industry, I’ve been in charge of model deployment and flow design developed by Python. Furthermore, my focus area also includes Flask API, MySQL, and Docker. As for career planning in the next few years, implementing machine learning models and learning ML Ops are my major objectives. ","date":"2021-10-26","objectID":"/about/:1:0","tags":[],"title":"About","uri":"/about/"},{"categories":["Self-Introduction"],"content":"Talking about why I build this site \u0026 future planning","date":"2021-10-17","objectID":"/preface/","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"Talking about why I build this site \u0026 future planning ","date":"2021-10-17","objectID":"/preface/:0:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"前言 本篇是作為自己網站的起點，問了自己幾個問題，讓自己對於為什麼要建立網站以及將來的規畫有一個系統性的整理，同時也是為了提醒自己是否有在當初的規劃上不斷前進。這個網站也會做為一個我個人的履歷，包含了解決問題的過程、研究經驗的分享並展現我的想法與思維，可能有錯誤的地方，我也希望得到指正與反饋。 ","date":"2021-10-17","objectID":"/preface/:1:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"網站的初衷 \u0026 為什麼要設立這個網站 最一開始的想法是想要保存自己在研究過程中的筆記，但這樣的想法缺乏必要性，可替代的方案太多像是自己有在使用 Notion，除此之外在工作中發現自己對於表達想法這件事沒有辦法有架構、系統性，對於抽象事物的整理能力明顯不足。 所以我想以書寫的方式，整理出自己的想法讓其他人能夠明白，嘗試站在他人的角度去發現自己的盲點，誇張一點的形容，希望十年後的自己回來看也能一目了然。 ","date":"2021-10-17","objectID":"/preface/:2:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"分享的主題 由於工作上使用的是 Python 開發 Machine Learning 的應用、API，所以會以 ML App \u0026 Ops 為主，前端為輔。 ","date":"2021-10-17","objectID":"/preface/:3:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"對於這個網站的期望 當 google 某些主題時我希望我能夠在第一頁。 除了分享文章外也能夠成為我的履歷。 中英文並行 ","date":"2021-10-17","objectID":"/preface/:4:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"希望達到什麼功能 登入驗證 客製化網站 (JS, HTML, CSS) 訂閱電子報 串接 GA 視覺化報表 ","date":"2021-10-17","objectID":"/preface/:5:0","tags":["introduction"],"title":"Preface","uri":"/preface/"},{"categories":["Self-Introduction"],"content":"最後 在規劃上會大目標切分成數個階段性達成的小目標，依照 Scrum 的方式，進行 Sprint 的迭代，最後完成這項產品。 還有很感謝有一位同伴 Enzo 一起來設立並完成這些目標。 ","date":"2021-10-17","objectID":"/preface/:6:0","tags":["introduction"],"title":"Preface","uri":"/preface/"}]